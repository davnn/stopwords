% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stopwords_edit.R
\name{stopwords_edit}
\alias{stopwords_edit}
\alias{char_edit}
\alias{char_remove}
\title{Conveniently edit stopword lists}
\usage{
stopwords_edit(language, source, simplify = TRUE)

char_edit(x, sep = "\\n")

char_remove(
  x,
  pattern,
  valuetype = c("glob", "fixed", "regex"),
  case_insensitive = TRUE
)
}
\arguments{
\item{language}{specify language of stopwords by ISO 639-1 code}

\item{source}{specify a stopwords source. To list the currently
available options, use \code{\link[=stopwords_getsources]{stopwords_getsources()}}.}

\item{simplify}{logical; if \code{TRUE} return a simple vector, if
\code{FALSE} return a list if the original word list was nested}

\item{x}{a character vector to be edited}

\item{sep}{a character vector of strings to append after each element,
defaults to \code{"\\n"} so that each word will be on its own line in the editor}

\item{pattern}{a character vector containing patterns matching elements to
be removed}

\item{valuetype}{the type of pattern matching: \code{"glob"} for "glob"-style
wildcard expressions; \code{"regex"} for regular expressions; or \code{"fixed"} for
exact matching}

\item{case_insensitive}{logical; if \code{TRUE}, ignore case when matching a
\code{pattern}}
}
\value{
\code{stopwords_edit()} returns an edited character vector if \code{simplify = TRUE} or an edited list if \code{simplify = FALSE} and the original stopword
list had nested levels.

\code{char_edit()} returns an edited character vector
}
\description{
Provides convenient removal of stopwords or interactive editing of stopword
lists.

\code{char_edit()} provides a quick way to edit character vectors,
useful for instance if you are editing a list for a second time.

\code{char_remove()} removes the stopwords matching \code{pattern} and corresponding
to the pattern type in \code{valuetype}.

There is no \code{char_add()} because you can just use \verb{[c()]} for this.
}
\note{
List editing (enabled when \code{simplify = FALSE} and the original stopword
list had nested levels) must follow \href{https://en.wikipedia.org/wiki/YAML}{YAML formatting rules}.
}
\examples{
\dontrun{
# edit some supplied stopwords
my_stopwords <- stopwords_edit("en", source = "snowball")

# additional editing of an already edited word list
my_stopwords2 <- char_edit(my_stopwords)
}

# edit stopwords as a list in YAML
my_list <- stopwords_edit("en", source = "marimo", simplify = FALSE)
# character removal examples
char_remove(letters[1:5], c("a", "c", "NOTLETTER"))
words <- c("any", "and", "Anna", "as", "announce", "but")
char_remove(words, "an*")
char_remove(words, "an*", case_insensitive = FALSE)
char_remove(words, "^.n.+$", valuetype = "regex")

# remove some of the system stopwords
stopwords("en", source = "snowball")[1:6]
stopwords("en", source = "snowball")[1:6] \%>\%
  char_remove(c("me", "my*"))
}
\seealso{
\code{\link[utils:glob2rx]{utils::glob2rx()}}, \href{https://en.wikipedia.org/wiki/Glob_(programming)}{glob pattern matching (Wikipedia)},
\code{\link[=grep]{grep()}}
}
